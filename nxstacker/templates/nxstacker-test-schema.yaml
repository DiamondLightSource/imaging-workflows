apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: nxstacker
  annotations:
    workflows.argoproj.io/title: nxstacker
    workflows.argoproj.io/description: |
      nxstacker is an utility to stack projections from different types of experiments to produce NeXus-compliance file(s).
    workflows.diamond.ac.uk/parameter-schema: |
    {{- .Files.Get "schema/test.json" | nindent 6 }}
spec:
  entrypoint: nxstacker
  arguments:
    parameters:
      - name: visitdir
        valueFrom:
          configMapKeyRef:
            name: sessionspaces
            key: data_directory
  templates:
    - name: nxstacker
      inputs:
        parameters:
          - name: experiment-type
            value: "ptycho"
          - name: quiet
            value: false
          - name: dry-run
            value: false
          - name: proj-dir
            value: ""
          - name: proj-file
            value: ""
          - name: nxtomo-dir
            value: ""
          - name: raw-dir
            value: ""
          - name: facility
            value: ""
          - name: from-scan
            value: ""
          - name: scan-list
            value: ""
          - name: exclude-scan
            value: ""
          - name: from-proj
            value: ""
          - name: proj-list
            value: ""
          - name: exclude-proj
            value: ""
          - name: from-angle
            value: ""
          - name: angle-list
            value: ""
          - name: exclude-angle
            value: ""
          - name: sort-by-angle
            value: false
          - name: pad-to-max
            value: false
          - name: compress
            value: false
          - name: skip-check
            value: false
          # DPC specific arguments
          - name: retrieval-method
            value: ""
          # XRF specific arguments
          - name: transition
            value: ""
          # pytycho specific arguments
          - name: save-complex
            value: false
          - name: save-modulus
            value: false
          - name: save-phase
            value: false
          - name: remove-ramp
            value: false
          - name: median-norm
            value: false
          - name: unwrap-phase
            value: false
          - name: rescale
            value: false
      script:
        image: ghcr.io/diamondlightsource/nxstacker:latest
        command: [bash]
        source: |
          set -euo pipefail

          cmd=("tomojoin" "{{`{{inputs.parameters.experiment-type}}`}}")

          [[ "{{`{{inputs.parameters.quiet}}`}}" == "true" ]] && cmd+=("--quiet")
          [[ "{{`{{inputs.parameters.dry-run}}`}}" == "true" ]] && cmd+=("--dry-run")
          [[ "{{`{{inputs.parameters.sort-by-angle}}`}}" == "true" ]] && cmd+=("--sort-by-angle")
          [[ "{{`{{inputs.parameters.pad-to-max}}`}}" == "true" ]] && cmd+=("--pad-to-max")
          [[ "{{`{{inputs.parameters.compress}}`}}" == "true" ]] && cmd+=("--compress")
          [[ "{{`{{inputs.parameters.skip-check}}`}}" == "true" ]] && cmd+=("--skip-check")
          [[ "{{`{{inputs.parameters.save-complex}}`}}" == "true" ]] && cmd+=("--save-complex")
          [[ "{{`{{inputs.parameters.save-modulus}}`}}" == "true" ]] && cmd+=("--save-modulus")
          [[ "{{`{{inputs.parameters.save-phase}}`}}" == "true" ]] && cmd+=("--save-phase")
          [[ "{{`{{inputs.parameters.remove-ramp}}`}}" == "true" ]] && cmd+=("--remove-ramp")
          [[ "{{`{{inputs.parameters.median-norm}}`}}" == "true" ]] && cmd+=("--median-norm")
          [[ "{{`{{inputs.parameters.unwrap-phase}}`}}" == "true" ]] && cmd+=("--unwrap-phase")
          [[ "{{`{{inputs.parameters.rescale}}`}}" == "true" ]] && cmd+=("--rescale")

          [[ -n "{{`{{inputs.parameters.proj-dir}}`}}" ]] && cmd+=("--proj-dir={{`{{inputs.parameters.proj-dir}}`}}")
          [[ -n "{{`{{inputs.parameters.proj-file}}`}}" ]] && cmd+=("--proj-file={{`{{inputs.parameters.proj-file}}`}}")
          [[ -n "{{`{{inputs.parameters.nxtomo-dir}}`}}" ]] && cmd+=("--nxtomo-dir={{`{{inputs.parameters.nxtomo-dir}}`}}")
          [[ -n "{{`{{inputs.parameters.raw-dir}}`}}" ]] && cmd+=("--raw-dir={{`{{inputs.parameters.raw-dir}}`}}")
          [[ -n "{{`{{inputs.parameters.facility}}`}}" ]] && cmd+=("--facility={{`{{inputs.parameters.facility}}`}}")
          [[ -n "{{`{{inputs.parameters.from-scan}}`}}" ]] && cmd+=("--from-scan={{`{{inputs.parameters.from-scan}}`}}")
          [[ -n "{{`{{inputs.parameters.scan-list}}`}}" ]] && cmd+=("--scan-list={{`{{inputs.parameters.scan-list}}`}}")
          [[ -n "{{`{{inputs.parameters.exclude-scan}}`}}" ]] && cmd+=("--exclude-scan={{`{{inputs.parameters.exclude-scan}}`}}")
          [[ -n "{{`{{inputs.parameters.from-proj}}`}}" ]] && cmd+=("--from-proj={{`{{inputs.parameters.from-proj}}`}}")
          [[ -n "{{`{{inputs.parameters.proj-list}}`}}" ]] && cmd+=("--proj-list={{`{{inputs.parameters.proj-list}}`}}")
          [[ -n "{{`{{inputs.parameters.exclude-proj}}`}}" ]] && cmd+=("--exclude-proj={{`{{inputs.parameters.exclude-proj}}`}}")
          [[ -n "{{`{{inputs.parameters.from-angle}}`}}" ]] && cmd+=("--from-angle={{`{{inputs.parameters.from-angle}}`}}")
          [[ -n "{{`{{inputs.parameters.angle-list}}`}}" ]] && cmd+=("--angle-list={{`{{inputs.parameters.angle-list}}`}}")
          [[ -n "{{`{{inputs.parameters.exclude-angle}}`}}" ]] && cmd+=("--exclude-angle={{`{{inputs.parameters.exclude-angle}}`}}")
          [[ -n "{{`{{inputs.parameters.retrieval-method}}`}}" ]] && cmd+=("--retrieval-method={{`{{inputs.parameters.retrieval-method}}`}}")
          [[ -n "{{`{{inputs.parameters.transition}}`}}" ]] && cmd+=("--transition={{`{{inputs.parameters.transition}}`}}")

          echo "Executing: ${cmd[*]}"
          exec "${cmd[@]}"
        volumeMounts:
          - name: session
            mountPath: "{{`{{workflow.parameters.visitdir}}`}}"
      volumes:
        - name: session
          hostPath:
            path: "{{`{{workflow.parameters.visitdir}}`}}`}}"
            type: Directory
