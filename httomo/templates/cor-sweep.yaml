apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: httomo-cor-sweep
  annotations:
    workflows.diamond.ac.uk/parameter-schema.input: |
      {
        "type": "string"
      }
    workflows.diamond.ac.uk/parameter-schema.output: |
      {
        "type": "string"
      }
    workflows.diamond.ac.uk/parameter-schema.nprocs: |
      {
        "type": "integer",
        "default": 1
      }
    workflows.diamond.ac.uk/parameter-schema.memory: |
      {
        "type": "string",
        "pattern": "^[0-9]+[GMK]i$",
        "default": "20Gi"
      }
    workflows.diamond.ac.uk/parameter-schema.config: |
    {{- .Files.Get "schemas/cor-sweep-param.json" | nindent 6 }}
spec:
  entrypoint: run
  volumeClaimTemplates:
  - metadata:
      name: tmpdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
      storageClassName: local-path
  arguments:
    parameters:
    - name: visitdir
      valueFrom:
        configMapKeyRef:
          name: sessionspaces
          key: data_directory
  templates:
  - name: run
    inputs:
      parameters:
      - name: config
      - name: input
      - name: output
      - name: httomo-outdir-name
        value: sweep-run
      - name: nprocs
        value: 1
      - name: memory
        value: 20Gi
    steps:
    - - name: run-httomo
        template: httomo
        arguments:
          parameters:
          - name: config
            value: "{{`{{ inputs.parameters.config }}`}}"
          - name: input
            value: "{{`{{ inputs.parameters.input }}`}}"
          - name: output
            value: "{{`{{ inputs.parameters.output }}`}}"
          - name: nprocs
            value: "{{`{{ inputs.parameters.nprocs }}`}}"
          - name: httomo-outdir-name
            value: "{{`{{ inputs.parameters.httomo-outdir-name }}`}}"
    - - name: generate-sweep-artifact
        template: sweep-artifact-script
        arguments:
          parameters:
          - name: image-dir-path
            value: "{{`{{ inputs.parameters.output }}`}}/{{`{{ inputs.parameters.httomo-outdir-name }}`}}/images_sweep_FBP3d_tomobar8bit_tif"
    podSpecPatch: |
      containers:
      - name: main
        resources:
          requests:
            cpu: "{{`{{ inputs.parameters.nprocs }}`}}"
            memory: "{{`{{ inputs.parameters.memory }}`}}"
            nvidia.com/gpu: "{{`{{ inputs.parameters.nprocs }}`}}"
          limits:
            cpu: "{{`{{ inputs.parameters.nprocs }}`}}"
            memory: "{{`{{ inputs.parameters.memory }}`}}"
            nvidia.com/gpu: "{{`{{ inputs.parameters.nprocs }}`}}"
    tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule
    - key: nodetype
      operator: Equal
      value: gpu
      effect: NoSchedule
  - name: httomo
    inputs:
      parameters:
      - name: config
      - name: input
      - name: output
      - name: httomo-outdir-name
      - name: nprocs
      - name: tmpdir-path
        value: /tmp
    container:
      image: ghcr.io/diamondlightsource/httomo:latest
      env:
      - name: CUPY_CACHE_DIR
        value: "{{`{{ inputs.parameters.tmpdir-path }}`}}/.cupy/kernel_cache"
      - name: MKL_NUM_THREADS
        value: "1"
      - name: NUMEXPR_NUM_THREADS
        value: "1"
      - name: OMP_NUM_THREADS
        value: "1"
      command:
      - /opt/conda/bin/mpirun
      args:
      - "-n"
      - "{{`{{ inputs.parameters.nprocs }}`}}"
      - "/opt/conda/bin/python"
      - "-m"
      - "httomo"
      - "run"
      - "--pipeline-format"
      - "json"
      - "--output-folder-name"
      - "{{`{{ inputs.parameters.httomo-outdir-name }}`}}"
      - "{{`{{ inputs.parameters.input }}`}}"
      - "{{`{{ inputs.parameters.config }}`}}"
      - "{{`{{ inputs.parameters.output }}`}}"
      volumeMounts:
      - name: session
        mountPath: "{{`{{ workflow.parameters.visitdir }}`}}"
      - name: tmpdir
        mountPath: "{{`{{ inputs.parameters.tmpdir-path }}`}}"
    volumes:
    - name: session
      hostPath:
        path:  "{{`{{ workflow.parameters.visitdir }}`}}"
        type: Directory
  - name: sweep-artifact-script
    inputs:
      parameters:
      - name: image-dir-path
      - name: tmpdir-path
        value: /tmp
      - name: output-filename
        value: multi-page-tiff.tif
    script:
      image: ghcr.io/diamondlightsource/httomo:latest
      command: [/opt/conda/bin/python]
      source: |
        from pathlib import Path
        import numpy as np
        import tifffile

        IMAGE_DIR = Path("{{`{{ inputs.parameters.image-dir-path }}`}}")
        OUT_PATH = "{{`{{ inputs.parameters.tmpdir-path }}`}}/{{`{{ inputs.parameters.output-filename }}`}}"
        filenames = list(IMAGE_DIR.glob("*.tif"))
        filenames.sort()
        single_image = tifffile.tifffile.imread(filenames[0])
        dtype = single_image.dtype
        shape = single_image.shape
        no_of_images = len(filenames)
        shape = (no_of_images, shape[0], shape[1])
        image_stack = np.empty(shape, dtype=dtype)
        for idx, filename in enumerate(filenames):
            image_stack[idx] = tifffile.tifffile.imread(filename)
        tifffile.tifffile.imwrite(OUT_PATH, image_stack)
      volumeMounts:
      - name: session
        mountPath: "{{`{{ workflow.parameters.visitdir }}`}}"
      - name: tmpdir
        mountPath: "{{`{{ inputs.parameters.tmpdir-path }}`}}"
    volumes:
    - name: session
      hostPath:
        path:  "{{`{{ workflow.parameters.visitdir }}`}}"
        type: Directory
    outputs:
      artifacts:
      - name: sweep-res
        path: "{{`{{ inputs.parameters.tmpdir-path }}`}}/{{`{{ inputs.parameters.output-filename }}`}}"
        archive:
          none: { }
